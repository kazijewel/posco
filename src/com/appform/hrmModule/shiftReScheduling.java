package com.appform.hrmModule;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import com.common.share.CommonButton;
import com.common.share.SessionBean;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.Window;

import org.hibernate.Session;
import org.hibernate.Transaction;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.TwinColSelect;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component.Event;
import com.vaadin.ui.Component.Listener;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.Notification;

public class shiftReScheduling extends Window 
{

	private AbsoluteLayout mainLayout;

	private Label lblCurrentShift;
	private ComboBox cmbCurrentShift;

	private Label lblTransferShift;
	private ComboBox cmbTransferShift;

	private TwinColSelect twinColEmployee;

	private NativeButton TransferSingle;
	private NativeButton DTransferSingle;

	private CheckBox chkOld= new CheckBox();

	ArrayList<Component> allComp = new ArrayList<Component>();

	CommonButton cButton = new CommonButton("New", "Save", "", "", "Refresh", "", "", "","","Exit");
	boolean isUpdate=false;
	String updateSID;
	private String[] EmployeeId=new String[]{};

	SessionBean sessionBean;

	public shiftReScheduling(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("SHIFT RESCHEDULING ::" +" "+sessionBean.getCompany() );

		txtInit(true);
		btnIni(true);
		btnAction();
		focusEnter();
		cmbCurrentShift();
		cButton.btnNew.focus();  
		authenticationCheck();
	
	}

	private void authenticationCheck()
	{
		if(!sessionBean.isSubmitable()){
			cButton.btnSave.setVisible(false);
		}

		if(!sessionBean.isUpdateable()){
			cButton.btnEdit.setVisible(false);
		}

		if(!sessionBean.isDeleteable()){
			cButton.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(cButton.btnNew);
		allComp.add(cButton.btnEdit);
		allComp.add(cButton.btnSave);
		allComp.add(cButton.btnRefresh);
		allComp.add(cButton.btnDelete);
		allComp.add(cButton.btnFind);

		new FocusMoveByEnter(this,allComp);
	}

	public void btnAction()
	{
		cButton.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				newButtonEvent();
				txtClear();
				cmbCurrentShift.focus();
			}
		});

		cButton.btnSave.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				formValidation();
			}
		});

		cButton.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		cButton.btnRefresh.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				refreshButtonEvent();
				txtClear();
			}
		});
		
		cmbCurrentShift.addListener(new ValueChangeListener()
		{
			public void valueChange(ValueChangeEvent event)
			{
				if(cmbCurrentShift.getValue()!=null){

					if(chkOld.booleanValue())
					{
					    String query =" select employeeCode,vEmployeeName from tbEmployeeInfo where vFloor ='"+cmbCurrentShift.getValue()+"'" +
							          " and employeeCode not " +
							          " in (select vEmployeeId from tempShift) and iStatus='1'";
						TwinColEmployee(query);
						cmbTransferedShift();
					}
					
					else{
						String query = " select employeeCode,vEmployeeName From tbEmployeeInfo where " +
							           " vFloor='"+cmbCurrentShift.getValue()+"' and iStatus='1'";
						TwinColEmployee(query);
						cmbTransferedShift();
					}
				
			}
			}
		});

		/*chkNew.addListener(new Listener() {
			public void componentEvent(Event event)
			{
				if(chkNew.booleanValue())
				{
					chkOld.setValue(false);
				}

				else
				{
					chkOld.setValue(true);
				}
			}
		});*/

/*		chkOld.addListener(new Listener() {
			public void componentEvent(Event event)
			{
					if(chkOld.booleanValue())
					{
						if(cmbCurrentShift.getValue()!=null){
					    String query =" select employeeCode,vEmployeeName from tbEmployeeInfo where vFloor ='"+cmbCurrentShift.getValue()+"'" +
							          " and employeeCode not " +
							          " in (select vEmployeeId from tempShift)";
								
								" select employeeCode,vEmployeeName from tbEmployeeInfo ei " +
								      " where vFloor not in(select ts.vShiftId from tempShift as ts where " +
								      " ts.vShiftId = ei.vFloor) and ";
						TwinColEmployee(query);
						cmbTransferedShift();
						}
					}
					if(!chkOld.booleanValue()){
				    	if(cmbCurrentShift.getValue()!=null){
						String query = " select employeeCode,vEmployeeName From tbEmployeeInfo where " +
							           " vFloor='"+cmbCurrentShift.getValue()+"'";
						TwinColEmployee(query);
						cmbTransferedShift();
				    	}
					}

			}

		});*/


	}

	private void formValidation()
	{
		if(cmbCurrentShift.getValue()!=null)
		{
			if(cmbTransferShift.getValue()!=null)
			{
				if(twinColEmployee.getValue()!=null)
				{
					saveBtnAction();
				}
				else
				{
					showNotification("Warning!","Provide Data To Column ",Notification.TYPE_WARNING_MESSAGE);
				}
			}
			else
			{
				getParent().showNotification("Warning,","Required Tranfer Shift.", Notification.TYPE_WARNING_MESSAGE);
				cmbTransferShift.focus();
			}
		}
		else
		{
			getParent().showNotification("Warning,","Select Current Shift.", Notification.TYPE_WARNING_MESSAGE);
			cmbCurrentShift.focus();
		}
	}


	private void cmbCurrentShift()
	{
		String query="";
		cmbCurrentShift.removeAllItems();
		System.out.println(query);

		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		query = "select vShiftId,vShiftName from tbshiftInformation";
		List list = session.createSQLQuery(query).list();

		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();

			cmbCurrentShift.addItem(element[0].toString());
			cmbCurrentShift.setItemCaption(element[0].toString(), element[1].toString());

		}
	}

	private void cmbTransferedShift()
	{
		String query="";
		cmbTransferShift.removeAllItems();
		System.out.println(query);

		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		query = "select vShiftId,vShiftName from tbshiftInformation where vShiftId !='"+cmbCurrentShift.getValue()+"'";
		List list = session.createSQLQuery(query).list();

		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();

			cmbTransferShift.addItem(element[0].toString());
			cmbTransferShift.setItemCaption(element[0].toString(), element[1].toString());
		}
	}

	private void TwinColEmployee(String query)
	{
		twinColEmployee.removeAllItems();

		System.out.println(query);

		Session session = SessionFactoryUtil.getInstance().getCurrentSession();
		Transaction tx;
		tx = session.beginTransaction();
		List list = session.createSQLQuery(query).list();

		for(Iterator iter = list.iterator(); iter.hasNext();)
		{
			Object[] element = (Object[]) iter.next();

			twinColEmployee.addItem(element[0].toString());
			twinColEmployee.setItemCaption(element[0].toString(), element[1].toString());

		}
	}

	private void saveBtnAction()
	{
		try
		{
			if (sessionBean.isUpdateable())
			{		MessageBox mb = new MessageBox(getParent(), "", MessageBox.Icon.QUESTION, "Do you want to Update Shift info?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						{
							UpdateData();
							isUpdate = false;
							btnIni(true);
							txtInit(true);
							txtClear();
							cButton.btnNew.focus();
						}
					}
				}
			});																	

			}
		}
		catch(Exception ex)
		{
			this.getParent().showNotification("Error.", ex.toString(), Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void UpdateData()
	{
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			String TrunTableSql = "truncate table tempShift"; 
			session.createSQLQuery(TrunTableSql).executeUpdate();
			
			String s =twinColEmployee.getValue().toString();
			StringTokenizer st;
			int i=twinColEmployee.getRows();
			System.out.println(i);
			st = new StringTokenizer(s,",[] ");
			int c = st.countTokens();

			for(int j=0;j<c;){
				String empId = st.nextToken().toString();
				String UpdateData="update tbEmployeeInfo set " +
						" vFloor='"+cmbTransferShift.getValue()+"' " +
						" where employeeCode='"+empId+"'";

				String insertData="INSERT INTO tempShift values(" +
						" '"+empId+"', " +
						" '"+cmbCurrentShift.getValue()+"')";		

				session.createSQLQuery(UpdateData).executeUpdate();
				session.createSQLQuery(insertData).executeUpdate();
				System.out.println("UpdateData: "+UpdateData);
				j++;
			}
			tx.commit();
			this.getParent().showNotification("All information update successfully.");
			btnIni(true);

		}
		catch (Exception ex) 
		{
			tx.rollback();
			this.getParent().showNotification("Error",ex+"",Notification.TYPE_ERROR_MESSAGE);
		}
	}

	private void refreshButtonEvent() 
	{
		txtInit(true);
		btnIni(true);
	}

	private void newButtonEvent()
	{
		txtInit(false);
		btnIni(false);
	}

	private void txtClear()
	{
		cmbCurrentShift.setValue(null);
		cmbTransferShift.setValue(null);
		twinColEmployee.removeAllItems();
	}

	private void btnIni(boolean t)
	{
		cButton.btnNew.setEnabled(t);
		cButton.btnSave.setEnabled(!t);
		cButton.btnRefresh.setEnabled(!t);
	}

	public void txtInit(boolean t)
	{
		cmbCurrentShift.setEnabled(!t);
		cmbTransferShift.setEnabled(!t);
		twinColEmployee.setEnabled(!t);
	}

	private AbsoluteLayout buildMainLayout() 
	{
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("660px");
		setHeight("430px");

		chkOld = new CheckBox("Old");
		chkOld.setImmediate(true);
		chkOld.setWidth("-1");
		chkOld.setHeight("-1px");
		mainLayout.addComponent(chkOld, "top:15.0px;left:300.0px;");

		// lblShiftName
		lblCurrentShift= new Label("<font color='#11562E'><Strong>Current Shift :<Strong></font>");
		lblCurrentShift.setImmediate(true);
		lblCurrentShift.setWidth("-1px");
		lblCurrentShift.setHeight("-1px");
		lblCurrentShift.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblCurrentShift, "top:40.0px;left:25.0px;");

		// txtShiftName
		cmbCurrentShift = new ComboBox();
		cmbCurrentShift.setImmediate(true);
		cmbCurrentShift.setWidth("150px");
		cmbCurrentShift.setHeight("-1px");
		mainLayout.addComponent(cmbCurrentShift, "top:38.0px;left:120.0px;");

		// lblDescription
		lblTransferShift = new Label("<font color='#11562E'><Strong>Transfer To :<Strong></font>");
		lblTransferShift.setImmediate(true);
		lblTransferShift.setWidth("-1px");
		lblTransferShift.setHeight("-1px");
		lblTransferShift.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblTransferShift,"top:40.0px;left:325.0px;");

		// txtDescription
		cmbTransferShift= new ComboBox();
		cmbTransferShift.setImmediate(true);
		cmbTransferShift.setWidth("150px");
		cmbTransferShift.setHeight("-1px");
		mainLayout.addComponent(cmbTransferShift, "top:38.0px;left:420.0px;");

		twinColEmployee=new TwinColSelect();
		twinColEmployee.setImmediate(true);
		twinColEmployee.setNullSelectionAllowed(true);
		twinColEmployee.setMultiSelect(true);
		twinColEmployee.setWidth("480px");
		twinColEmployee.setRows(15);
		twinColEmployee.setLeftColumnCaption("Current Shift");
		twinColEmployee.setRightColumnCaption("Transferd Shift");
		twinColEmployee.setItemIcon(EmployeeId,new ThemeResource("../icons/greatre1.png"));
		mainLayout.addComponent(twinColEmployee, "top:90.0px;left:90.0px;");

		/*TransferSingle= new NativeButton();
		TransferSingle.setImmediate(true);
		TransferSingle.setImmediate(true);
		TransferSingle.setWidth("38px");
		TransferSingle.setHeight("-1px");
		//TransferSingle.setIcon(new ThemeResource("../icons/greatre1.png"));
		mainLayout.addComponent(TransferSingle, "top:200.0px;left:310.0px;");

		DTransferSingle= new NativeButton();
		DTransferSingle.setImmediate(true);
		DTransferSingle.setWidth("38px");
		DTransferSingle.setHeight("-1px");
		DTransferSingle.setImmediate(true);
		DTransferSingle.setIcon(new ThemeResource("../icons/less1.png"));
		mainLayout.addComponent(DTransferSingle, "top:230.0px;left:310.0px;");*/

		mainLayout.addComponent(cButton, "top:340.0px; left:160.0px ");		
		return mainLayout;
	}
}
