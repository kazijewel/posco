package com.appform.hrmModule;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import com.common.share.CommonButton;
import com.common.share.SessionBean;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.Window;

import org.hibernate.Session;
import org.hibernate.Transaction;
import com.common.share.FocusMoveByEnter;
import com.common.share.MessageBox;
import com.common.share.SessionFactoryUtil;
import com.common.share.TextRead;
import com.common.share.MessageBox.ButtonType;
import com.common.share.MessageBox.EventListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.Notification;

public class ShiftInfo extends Window 
{

	private AbsoluteLayout mainLayout;

	private TextArea txtDescription;
	private Label lblDescription;

	private TextField txtShiftName;
	private Label lblShiftName;

	private Label lblShiftStart;
	private InlineDateField dShiftStart;

	private Label lblShiftEnd;
	private InlineDateField dShiftEnd;

	private Label lblLateIn;
	private InlineDateField dLateIn;

	private Label lblEarlyOut;
	private InlineDateField dEarlyOut;

	private Label lblOverTimeStart;
	private InlineDateField dOverTimeStart;

	private Label lblOverTimetEnd;
	private InlineDateField dOverTimeEnd;

	private TextRead txtColor;
	private Label lblHeader;

	private TextField txtShiftID = new TextField();
	ArrayList<Component> allComp = new ArrayList<Component>();
	SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");

	CommonButton cButton = new CommonButton("New", "Save", "Edit", "", "Refresh", "Find", "", "","","Exit");
	boolean isUpdate=false;
	String updateSID;

	SessionBean sessionBean;


	public ShiftInfo(SessionBean sessionBean) 
	{
		this.sessionBean=sessionBean;
		buildMainLayout();
		setContent(mainLayout);
		this.setResizable(false);
		this.setCaption("SHIFT INFORMATION ::" +" "+sessionBean.getCompany() );

		txtInit(true);
		btnIni(true);
		btnAction();
		focusEnter();

		authenticationCheck();
	}

	private void authenticationCheck()
	{
		if(!sessionBean.isSubmitable()){
			cButton.btnSave.setVisible(false);
		}

		if(!sessionBean.isUpdateable()){
			cButton.btnEdit.setVisible(false);
		}

		if(!sessionBean.isDeleteable()){
			cButton.btnDelete.setVisible(false);
		}
	}

	private void focusEnter()
	{
		allComp.add(txtShiftName);
		allComp.add(txtDescription);

		allComp.add(cButton.btnNew);
		allComp.add(cButton.btnEdit);
		allComp.add(cButton.btnSave);
		allComp.add(cButton.btnRefresh);
		allComp.add(cButton.btnDelete);
		allComp.add(cButton.btnFind);

		new FocusMoveByEnter(this,allComp);
	}

	public void btnAction()
	{
		cButton.btnNew.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				txtShiftName.focus();
				newButtonEvent();
				txtClear();
				System.out.println("dShiftStart"+time.format(dShiftStart.getValue()));
			}
		});

		cButton.btnSave.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!txtShiftName.getValue().toString().isEmpty()){
					if(sessionBean.isSubmitable()){
						saveBtnAction();
					}else{
						showNotification("Warning,","You have not Proper Authentication to Save.", Notification.TYPE_WARNING_MESSAGE);
					}
				}else{
					showNotification("Provide Shift Name",Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

		cButton.btnEdit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				if(!txtShiftName.getValue().toString().isEmpty())
				{
					updateButtonEvent();
				}
				else
				{
					getParent().showNotification("Warning!,","There are nothing to update", Notification.TYPE_WARNING_MESSAGE);
				}
			}
		});

	
		cButton.btnExit.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				close();
			}
		});

		cButton.btnRefresh.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				refreshButtonEvent();
				txtClear();
			}
		});

		cButton.btnFind.addListener( new Button.ClickListener() 
		{
			public void buttonClick(ClickEvent event) 
			{
				findButtonEvent();
			}
		});
	}

	private String selectShiftCode()
	{
		String ShiftId = "";
		Transaction tx = null;
		try
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			String query=" Select isnull(max(cast(vShiftId as int)),0)+1 from tbShiftInformation ";
			Iterator iter = session.createSQLQuery(query).list().iterator();

			if(iter.hasNext())
			{
				ShiftId=iter.next().toString();
			}
		}
		catch(Exception ex)
		{
			System.out.print(ex);
		}

		return ShiftId;
	}

	private void findButtonEvent() 
	{
		Window win = new ShiftFindWindow(sessionBean, txtShiftID,"ShiftId");
		win.addListener(new Window.CloseListener() 
		{
			public void windowClose(CloseEvent e) 
			{
				if (txtShiftID.getValue().toString().length() > 0)
				{
					txtClear();
					findInitialise(txtShiftID.getValue().toString());
				}
			}
		});

		this.getParent().addWindow(win);
	}

	private void findInitialise(String txtShiftId) 
	{
		Transaction tx = null;
		try 
		{
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();

			updateSID  = txtShiftId;

			List led = session.createSQLQuery("select vShiftId,vShiftName,vDescription,tShiftStart,tShiftEnd,tLateIn,tEarlyOut,tOverTimeStart,tOverTimeEnd from tbShiftInformation Where vShiftId ='"+txtShiftId+"'").list();

			if (led.iterator().hasNext()) 
			{
				Object[] element = (Object[]) led.iterator().next();

				txtShiftName.setValue(element[1]);
				txtDescription.setValue(element[2]);
				dShiftStart.setValue(element[3]);
				dShiftEnd.setValue(element[4]);
				dLateIn.setValue(element[5]);
				dEarlyOut.setValue(element[6]);
				dOverTimeStart.setValue(element[7]);
				dOverTimeEnd.setValue(element[8]);
			}
		}
		catch (Exception exp) 
		{
			this.getParent().showNotification("Error", exp + "",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void updateButtonEvent()
	{
		if(!txtShiftName.getValue().toString().isEmpty())
		{
			isUpdate = true;
			txtDescription.setEnabled(true);
			btnIni(false);
			txtInit(false);
		}
		else{
			this.getParent().showNotification("Update Failed","There are no data for update.",Notification.TYPE_WARNING_MESSAGE);
		}
	}

	private void saveBtnAction()
	{
		if(isUpdate)
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to update information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						updateData();
						isUpdate = false;
						txtInit(true);
						btnIni(true);
						txtClear();
						cButton.btnNew.focus();
					}
				}
			});
		}
		else
		{
			MessageBox mb = new MessageBox(getParent(), "Are you sure?", MessageBox.Icon.QUESTION, "Do you want to save all information?", new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"), new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
			mb.show(new EventListener()
			{
				public void buttonClicked(ButtonType buttonType)
				{
					if(buttonType == ButtonType.YES)
					{
						insertData();
						isUpdate = false;		
						txtInit(true);
						btnIni(true);
						txtClear();
						cButton.btnNew.focus();
					}
				}
			});
		}

	}
	public void updateData() 
	{
		Transaction tx = null;
		try
		{			
			Session session = SessionFactoryUtil.getInstance().getCurrentSession();
			tx = session.beginTransaction();
			session.createSQLQuery("Update tbShiftInformation set " +
					" vShiftName= '"+txtShiftName.getValue().toString().trim()+"', " +
					" vDescription= '"+txtDescription.getValue().toString().trim()+"', " +
					" tShiftStart= '"+time.format(dShiftStart.getValue())+"', " +
					" tShiftEnd= '"+time.format(dShiftEnd.getValue())+"', " +
					" tLateIn ='"+time.format(dLateIn.getValue())+"', " +
					" tEarlyOut ='"+time.format(dEarlyOut.getValue())+"', " +
					" tOverTimeStart= '"+time.format(dOverTimeStart.getValue())+"', " +
					" tOverTimeEnd ='"+time.format(dOverTimeEnd.getValue())+"', " +
					" UserId = '"+sessionBean.getUserId()+"'," +
					" UserIp = '"+sessionBean.getUserIp()+"', " +
					" EntryTime = CURRENT_TIMESTAMP where " +
					" vShiftId = '"+updateSID+"'").executeUpdate();

			System.out.println("User IP : "+sessionBean.getUserIp());

			tx.commit();
			this.getParent().showNotification("Desire information update successfully.");

			isUpdate=false;
		}
		catch(Exception exp){
			this.getParent().showNotification("Error",exp+"",Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}


	private void insertData()
	{
		Transaction tx= null;
		try
		{
			Session session= SessionFactoryUtil.getInstance().getCurrentSession();
			tx=session.beginTransaction();

			String insertData="INSERT INTO tbShiftInformation values(" +
					" '"+selectShiftCode()+"', " +
					" '"+txtShiftName.getValue().toString().trim()+"', " +
					" '"+txtDescription.getValue().toString().trim()+"', " +
					" '"+time.format(dShiftStart.getValue())+"', " +
					" '"+time.format(dShiftEnd.getValue())+"', " +
					" '"+time.format(dLateIn.getValue())+"', " +
					" '"+time.format(dEarlyOut.getValue())+"', " +
					" '"+time.format(dOverTimeStart.getValue())+"', " +
					" '"+time.format(dOverTimeEnd.getValue())+"', " +
					" '"+sessionBean.getUserId()+"', " +
					" '"+sessionBean.getUserIp()+"', " +
					" CURRENT_TIMESTAMP )";

			System.out.println("insertData: "+insertData);
			session.createSQLQuery(insertData).executeUpdate();

			showNotification("All information saved successfully");
			tx.commit();
		}
		catch (Exception ex) 
		{
			this.getParent().showNotification("Error",ex+"", Notification.TYPE_ERROR_MESSAGE);
			tx.rollback();
		}
	}

	private void refreshButtonEvent() 
	{
		txtInit(true);
		btnIni(true);
	}

	private void newButtonEvent()
	{
		txtInit(false);
		btnIni(false);
	}

	private void txtClear()
	{
		txtShiftName.setValue("");
		txtDescription.setValue("");
		dShiftStart.setValue(new Date());
		dShiftEnd.setValue(new Date());
		dLateIn.setValue(new Date());
		dEarlyOut.setValue(new Date());
		dOverTimeStart.setValue(new Date());
		dOverTimeEnd.setValue(new Date());
	}

	private void btnIni(boolean t)
	{
		cButton.btnNew.setEnabled(t);
		cButton.btnEdit.setEnabled(t);
		cButton.btnSave.setEnabled(!t);
		cButton.btnRefresh.setEnabled(!t);
		cButton.btnDelete.setEnabled(t);
		cButton.btnFind.setEnabled(t);
	}

	public void txtInit(boolean t)
	{
		txtShiftName.setEnabled(!t);
		txtDescription.setEnabled(!t);
		dShiftStart.setEnabled(!t);
		dShiftEnd.setEnabled(!t);
		dOverTimeStart.setEnabled(!t);
		dOverTimeEnd.setEnabled(!t);
		dEarlyOut.setEnabled(!t);
		dLateIn.setEnabled(!t);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() 
	{
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("660px");
		setHeight("430px");

		// lblShiftName
		lblShiftName= new Label("<font color='#11562E'><Strong>Shift Name :<Strong></font>");
		lblShiftName.setImmediate(false);
		lblShiftName.setWidth("-1px");
		lblShiftName.setHeight("-1px");
		lblShiftName.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblShiftName, "top:20.0px;left:25.0px;");

		// txtShiftName
		txtShiftName = new TextField();
		txtShiftName.setImmediate(false);
		txtShiftName.setWidth("290px");
		txtShiftName.setHeight("-1px");
		mainLayout.addComponent(txtShiftName, "top:18.0px;left:120.0px;");

		// lblDescription
		lblDescription = new Label("<font color='#11562E'><Strong>Description :<Strong></font>");
		lblDescription.setImmediate(false);
		lblDescription.setWidth("-1px");
		lblDescription.setHeight("-1px");
		lblDescription.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblDescription,"top:55.0px;left:25.0px;");

		// txtDescription
		txtDescription = new TextArea();
		txtDescription.setImmediate(false);
		txtDescription.setWidth("320px");
		txtDescription.setHeight("48px");
		mainLayout.addComponent(txtDescription, "top:53.0px;left:120.0px;");

		//txtColor
		txtColor = new TextRead();
		txtColor.setImmediate(true);
		txtColor.setWidth("638px");
		txtColor.setHeight("200px");
		txtColor.setStyleName("ShiftBackcolor");
		mainLayout.addComponent(txtColor, "top:120.0px;left:10.0px;");

		// lblHeader
		lblHeader = new Label("<font color='#11562E' size='3px'><Strong><i>Shift Setup<i><Strong></font>");
		lblHeader.setImmediate(false);
		lblHeader.setWidth("-1px");
		lblHeader.setHeight("-1px");
		lblHeader.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblHeader,"top:125.0px;left:270.0px;");

		// lblShiftStart
		lblShiftStart = new Label("<font color='#A00324'><Strong>Shift Start Time :<Strong></font>");
		lblShiftStart.setImmediate(false);
		lblShiftStart.setWidth("-1px");
		lblShiftStart.setHeight("-1px");
		lblShiftStart.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblShiftStart,"top:170.0px;left:25.0px;");

		// dShiftStart
		dShiftStart = new InlineDateField();
		dShiftStart.setWidth("110px");
		dShiftStart.setHeight("24px");
		dShiftStart.setResolution(InlineDateField.RESOLUTION_SEC);
		dShiftStart.setInvalidAllowed(false);
		dShiftStart.setImmediate(true);
		dShiftStart.setDateFormat("HH:mm:ss");
		dShiftStart.setValue(new Date());
		mainLayout.addComponent(dShiftStart, "top:168.0px;left:150.0px;");

		// lblShiftEnd
		lblShiftEnd = new Label("<font color='#A00324'><Strong>Shift End Time :<Strong></font>");
		lblShiftEnd.setImmediate(false);
		lblShiftEnd.setWidth("-1px");
		lblShiftEnd.setHeight("-1px");
		lblShiftEnd.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblShiftEnd,"top:170.0px;left:335.0px;");

		// dShiftEnd
		dShiftEnd = new InlineDateField();
		dShiftEnd.setWidth("110px");
		dShiftEnd.setHeight("24px");
		dShiftEnd.setResolution(InlineDateField.RESOLUTION_SEC);
		dShiftEnd.setInvalidAllowed(false);
		dShiftEnd.setImmediate(true);
		dShiftEnd.setDateFormat("HH:mm:ss");
		dShiftEnd.setValue(new Date());
		mainLayout.addComponent(dShiftEnd, "top:168.0px;left:460.0px;");

		// lblLateIn
		lblLateIn = new Label("<font color='#A00324'><Strong>Late In Time Limit :<Strong></font>");
		lblLateIn.setImmediate(false);
		lblLateIn.setWidth("-1px");
		lblLateIn.setHeight("-1px");
		lblLateIn.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblLateIn,"top:195.0px;left:25.0px;");

		// dLateIn
		dLateIn = new InlineDateField();
		dLateIn.setWidth("110px");
		dLateIn.setHeight("24px");
		dLateIn.setResolution(InlineDateField.RESOLUTION_SEC);
		dLateIn.setInvalidAllowed(false);
		dLateIn.setImmediate(true);
		dLateIn.setDateFormat("HH:mm:ss");
		dLateIn.setValue(new Date());
		mainLayout.addComponent(dLateIn, "top:193.0px;left:150.0px;");

		// lblEarlyOut
		lblEarlyOut = new Label("<font color='#A00324'><Strong>Early Out Time Limit :<Strong></font>");
		lblEarlyOut.setImmediate(false);
		lblEarlyOut.setWidth("-1px");
		lblEarlyOut.setHeight("-1px");
		lblEarlyOut.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblEarlyOut,"top:195.0px;left:335.0px;");

		// dEarlyOut
		dEarlyOut = new InlineDateField();
		dEarlyOut.setWidth("110px");
		dEarlyOut.setHeight("24px");
		dEarlyOut.setResolution(InlineDateField.RESOLUTION_SEC);
		dEarlyOut.setInvalidAllowed(false);
		dEarlyOut.setImmediate(true);
		dEarlyOut.setDateFormat("HH:mm:ss");
		dEarlyOut.setValue(new Date());
		mainLayout.addComponent(dEarlyOut, "top:193.0px;left:460.0px;");

		// lblOverTimeStart
		lblOverTimeStart = new Label("<font color='#A00324'><Strong>Over Time Starts At :<Strong></font>");
		lblOverTimeStart.setImmediate(false);
		lblOverTimeStart.setWidth("-1px");
		lblOverTimeStart.setHeight("-1px");
		lblOverTimeStart.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblOverTimeStart,"top:220.0px;left:25.0px;");

		// dOverTimeStart
		dOverTimeStart = new InlineDateField();
		dOverTimeStart.setWidth("110px");
		dOverTimeStart.setHeight("24px");
		dOverTimeStart.setResolution(InlineDateField.RESOLUTION_SEC);
		dOverTimeStart.setInvalidAllowed(false);
		dOverTimeStart.setImmediate(true);
		dOverTimeStart.setDateFormat("HH:mm:ss");
		dOverTimeStart.setValue(new Date());
		mainLayout.addComponent(dOverTimeStart, "top:218.0px;left:150.0px;");

		// lblOverTimetEnd
		lblOverTimetEnd = new Label("<font color='#A00324'><Strong>Over Time End Limit :<Strong></font>");
		lblOverTimetEnd.setImmediate(false);
		lblOverTimetEnd.setWidth("-1px");
		lblOverTimetEnd.setHeight("-1px");
		lblOverTimetEnd.setContentMode(Label.CONTENT_XHTML);
		mainLayout.addComponent(lblOverTimetEnd,"top:220.0px;left:335.0px;");

		// dOverTimeEnd
		dOverTimeEnd = new InlineDateField();
		dOverTimeEnd.setWidth("110px");
		dOverTimeEnd.setHeight("24px");
		dOverTimeEnd.setResolution(InlineDateField.RESOLUTION_SEC);
		dOverTimeEnd.setInvalidAllowed(false);
		dOverTimeEnd.setImmediate(true);
		dOverTimeEnd.setDateFormat("HH:mm:ss");
		dOverTimeEnd.setValue(new Date());
		mainLayout.addComponent(dOverTimeEnd, "top:218.0px;left:460.0px;");

		mainLayout.addComponent(cButton, "top:340.0px; left:60.0px ");		
		return mainLayout;
	}
}
